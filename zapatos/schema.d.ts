/*
** DON'T EDIT THIS FILE **
It's been generated by Zapatos, and is liable to be overwritten

Zapatos: https://jawj.github.io/zapatos/
Copyright (C) 2020 - 2022 George MacKerron
Released under the MIT licence: see LICENCE file
*/

declare module 'zapatos/schema' {

  import type * as db from 'zapatos/db';

  // got a type error on schemaVersionCanary below? update by running `npx zapatos`
  export interface schemaVersionCanary extends db.SchemaVersionCanary { version: 104 }


  /* === schema: public === */

  /* --- enums --- */
  /* (none) */

  /* --- tables --- */

  /**
   * **clients**
   * - Table in database
   */
  export namespace clients {
    export type Table = 'clients';
    export interface Selectable {
      /**
      * **clients.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **clients.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt: Date;
      /**
      * **clients.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updatedAt: Date;
      /**
      * **clients.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **clients.identifier**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      identifier: string;
      /**
      * **clients.logo**
      * - `text` in database
      * - Nullable, no default
      */
      logo: string | null;
      /**
      * **clients.isArchived**
      * - `bool` in database
      * - Nullable, default: `false`
      */
      isArchived: boolean | null;
      /**
      * **clients.parentId**
      * - `text` in database
      * - Nullable, no default
      */
      parentId: string | null;
      /**
      * **clients.keyStart**
      * - `int8` in database
      * - Nullable, no default
      */
      keyStart: db.Int8String | null;
      /**
      * **clients.keyEnd**
      * - `int8` in database
      * - Nullable, no default
      */
      keyEnd: db.Int8String | null;
      /**
      * **clients.localities**
      * - `_text` in database
      * - Nullable, no default
      */
      localities: string[] | null;
      /**
      * **clients.serviceCentreId**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      serviceCentreId: string;
    }
    export interface JSONSelectable {
      /**
      * **clients.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **clients.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt: db.TimestampTzString;
      /**
      * **clients.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updatedAt: db.TimestampTzString;
      /**
      * **clients.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **clients.identifier**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      identifier: string;
      /**
      * **clients.logo**
      * - `text` in database
      * - Nullable, no default
      */
      logo: string | null;
      /**
      * **clients.isArchived**
      * - `bool` in database
      * - Nullable, default: `false`
      */
      isArchived: boolean | null;
      /**
      * **clients.parentId**
      * - `text` in database
      * - Nullable, no default
      */
      parentId: string | null;
      /**
      * **clients.keyStart**
      * - `int8` in database
      * - Nullable, no default
      */
      keyStart: number | null;
      /**
      * **clients.keyEnd**
      * - `int8` in database
      * - Nullable, no default
      */
      keyEnd: number | null;
      /**
      * **clients.localities**
      * - `_text` in database
      * - Nullable, no default
      */
      localities: string[] | null;
      /**
      * **clients.serviceCentreId**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      serviceCentreId: string;
    }
    export interface Whereable {
      /**
      * **clients.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **clients.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **clients.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updatedAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **clients.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **clients.identifier**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      identifier?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **clients.logo**
      * - `text` in database
      * - Nullable, no default
      */
      logo?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **clients.isArchived**
      * - `bool` in database
      * - Nullable, default: `false`
      */
      isArchived?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
      /**
      * **clients.parentId**
      * - `text` in database
      * - Nullable, no default
      */
      parentId?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **clients.keyStart**
      * - `int8` in database
      * - Nullable, no default
      */
      keyStart?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **clients.keyEnd**
      * - `int8` in database
      * - Nullable, no default
      */
      keyEnd?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **clients.localities**
      * - `_text` in database
      * - Nullable, no default
      */
      localities?: string[] | db.Parameter<string[]> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string[] | db.Parameter<string[]> | db.SQLFragment | db.ParentColumn>;
      /**
      * **clients.serviceCentreId**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      serviceCentreId?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **clients.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **clients.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **clients.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updatedAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **clients.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **clients.identifier**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      identifier: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **clients.logo**
      * - `text` in database
      * - Nullable, no default
      */
      logo?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **clients.isArchived**
      * - `bool` in database
      * - Nullable, default: `false`
      */
      isArchived?: boolean | db.Parameter<boolean> | null | db.DefaultType | db.SQLFragment;
      /**
      * **clients.parentId**
      * - `text` in database
      * - Nullable, no default
      */
      parentId?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **clients.keyStart**
      * - `int8` in database
      * - Nullable, no default
      */
      keyStart?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | null | db.DefaultType | db.SQLFragment;
      /**
      * **clients.keyEnd**
      * - `int8` in database
      * - Nullable, no default
      */
      keyEnd?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | null | db.DefaultType | db.SQLFragment;
      /**
      * **clients.localities**
      * - `_text` in database
      * - Nullable, no default
      */
      localities?: string[] | db.Parameter<string[]> | null | db.DefaultType | db.SQLFragment;
      /**
      * **clients.serviceCentreId**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      serviceCentreId: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **clients.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **clients.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **clients.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updatedAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **clients.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **clients.identifier**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      identifier?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **clients.logo**
      * - `text` in database
      * - Nullable, no default
      */
      logo?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **clients.isArchived**
      * - `bool` in database
      * - Nullable, default: `false`
      */
      isArchived?: boolean | db.Parameter<boolean> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **clients.parentId**
      * - `text` in database
      * - Nullable, no default
      */
      parentId?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **clients.keyStart**
      * - `int8` in database
      * - Nullable, no default
      */
      keyStart?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **clients.keyEnd**
      * - `int8` in database
      * - Nullable, no default
      */
      keyEnd?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **clients.localities**
      * - `_text` in database
      * - Nullable, no default
      */
      localities?: string[] | db.Parameter<string[]> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string[] | db.Parameter<string[]> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **clients.serviceCentreId**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      serviceCentreId?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'clients_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **holidays**
   * - Table in database
   */
  export namespace holidays {
    export type Table = 'holidays';
    export interface Selectable {
      /**
      * **holidays.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **holidays.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt: Date;
      /**
      * **holidays.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updatedAt: Date;
      /**
      * **holidays.locality**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      locality: string;
      /**
      * **holidays.date**
      * - `date` in database
      * - `NOT NULL`, no default
      */
      date: Date;
      /**
      * **holidays.observed**
      * - `date` in database
      * - Nullable, no default
      */
      observed: Date | null;
      /**
      * **holidays.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **holidays.entity**
      * - `text` in database
      * - Nullable, no default
      */
      entity: string | null;
      /**
      * **holidays.entityId**
      * - `text` in database
      * - Nullable, no default
      */
      entityId: string | null;
      /**
      * **holidays.isRemoved**
      * - `bool` in database
      * - Nullable, no default
      */
      isRemoved: boolean | null;
    }
    export interface JSONSelectable {
      /**
      * **holidays.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **holidays.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt: db.TimestampTzString;
      /**
      * **holidays.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updatedAt: db.TimestampTzString;
      /**
      * **holidays.locality**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      locality: string;
      /**
      * **holidays.date**
      * - `date` in database
      * - `NOT NULL`, no default
      */
      date: db.DateString;
      /**
      * **holidays.observed**
      * - `date` in database
      * - Nullable, no default
      */
      observed: db.DateString | null;
      /**
      * **holidays.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **holidays.entity**
      * - `text` in database
      * - Nullable, no default
      */
      entity: string | null;
      /**
      * **holidays.entityId**
      * - `text` in database
      * - Nullable, no default
      */
      entityId: string | null;
      /**
      * **holidays.isRemoved**
      * - `bool` in database
      * - Nullable, no default
      */
      isRemoved: boolean | null;
    }
    export interface Whereable {
      /**
      * **holidays.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **holidays.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **holidays.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updatedAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **holidays.locality**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      locality?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **holidays.date**
      * - `date` in database
      * - `NOT NULL`, no default
      */
      date?: (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **holidays.observed**
      * - `date` in database
      * - Nullable, no default
      */
      observed?: (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **holidays.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **holidays.entity**
      * - `text` in database
      * - Nullable, no default
      */
      entity?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **holidays.entityId**
      * - `text` in database
      * - Nullable, no default
      */
      entityId?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **holidays.isRemoved**
      * - `bool` in database
      * - Nullable, no default
      */
      isRemoved?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **holidays.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **holidays.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **holidays.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updatedAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **holidays.locality**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      locality: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **holidays.date**
      * - `date` in database
      * - `NOT NULL`, no default
      */
      date: (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | db.SQLFragment;
      /**
      * **holidays.observed**
      * - `date` in database
      * - Nullable, no default
      */
      observed?: (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | null | db.DefaultType | db.SQLFragment;
      /**
      * **holidays.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **holidays.entity**
      * - `text` in database
      * - Nullable, no default
      */
      entity?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **holidays.entityId**
      * - `text` in database
      * - Nullable, no default
      */
      entityId?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **holidays.isRemoved**
      * - `bool` in database
      * - Nullable, no default
      */
      isRemoved?: boolean | db.Parameter<boolean> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **holidays.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **holidays.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **holidays.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updatedAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **holidays.locality**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      locality?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **holidays.date**
      * - `date` in database
      * - `NOT NULL`, no default
      */
      date?: (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | db.SQLFragment>;
      /**
      * **holidays.observed**
      * - `date` in database
      * - Nullable, no default
      */
      observed?: (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **holidays.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **holidays.entity**
      * - `text` in database
      * - Nullable, no default
      */
      entity?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **holidays.entityId**
      * - `text` in database
      * - Nullable, no default
      */
      entityId?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **holidays.isRemoved**
      * - `bool` in database
      * - Nullable, no default
      */
      isRemoved?: boolean | db.Parameter<boolean> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'holiday_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **legalEntities**
   * - Table in database
   */
  export namespace legalEntities {
    export type Table = 'legalEntities';
    export interface Selectable {
      /**
      * **legalEntities.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **legalEntities.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt: Date;
      /**
      * **legalEntities.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updatedAt: Date;
      /**
      * **legalEntities.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **legalEntities.identifier**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      identifier: string;
      /**
      * **legalEntities.logo**
      * - `text` in database
      * - Nullable, no default
      */
      logo: string | null;
      /**
      * **legalEntities.frequency**
      * - `text` in database
      * - Nullable, default: `'monthly'::text`
      */
      frequency: string | null;
      /**
      * **legalEntities.targetDay**
      * - `text` in database
      * - Nullable, default: `'last'::text`
      */
      targetDay: string | null;
      /**
      * **legalEntities.serviceCentreId**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      serviceCentreId: string;
      /**
      * **legalEntities.providerId**
      * - `text` in database
      * - Nullable, no default
      */
      providerId: string | null;
      /**
      * **legalEntities.clientId**
      * - `text` in database
      * - Nullable, no default
      */
      clientId: string | null;
      /**
      * **legalEntities.milestoneSetId**
      * - `text` in database
      * - Nullable, no default
      */
      milestoneSetId: string | null;
      /**
      * **legalEntities.isArchived**
      * - `bool` in database
      * - Nullable, default: `false`
      */
      isArchived: boolean | null;
      /**
      * **legalEntities.keyStart**
      * - `int8` in database
      * - Nullable, no default
      */
      keyStart: db.Int8String | null;
      /**
      * **legalEntities.keyEnd**
      * - `int8` in database
      * - Nullable, no default
      */
      keyEnd: db.Int8String | null;
      /**
      * **legalEntities.localities**
      * - `_text` in database
      * - Nullable, no default
      */
      localities: string[] | null;
    }
    export interface JSONSelectable {
      /**
      * **legalEntities.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **legalEntities.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt: db.TimestampTzString;
      /**
      * **legalEntities.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updatedAt: db.TimestampTzString;
      /**
      * **legalEntities.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **legalEntities.identifier**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      identifier: string;
      /**
      * **legalEntities.logo**
      * - `text` in database
      * - Nullable, no default
      */
      logo: string | null;
      /**
      * **legalEntities.frequency**
      * - `text` in database
      * - Nullable, default: `'monthly'::text`
      */
      frequency: string | null;
      /**
      * **legalEntities.targetDay**
      * - `text` in database
      * - Nullable, default: `'last'::text`
      */
      targetDay: string | null;
      /**
      * **legalEntities.serviceCentreId**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      serviceCentreId: string;
      /**
      * **legalEntities.providerId**
      * - `text` in database
      * - Nullable, no default
      */
      providerId: string | null;
      /**
      * **legalEntities.clientId**
      * - `text` in database
      * - Nullable, no default
      */
      clientId: string | null;
      /**
      * **legalEntities.milestoneSetId**
      * - `text` in database
      * - Nullable, no default
      */
      milestoneSetId: string | null;
      /**
      * **legalEntities.isArchived**
      * - `bool` in database
      * - Nullable, default: `false`
      */
      isArchived: boolean | null;
      /**
      * **legalEntities.keyStart**
      * - `int8` in database
      * - Nullable, no default
      */
      keyStart: number | null;
      /**
      * **legalEntities.keyEnd**
      * - `int8` in database
      * - Nullable, no default
      */
      keyEnd: number | null;
      /**
      * **legalEntities.localities**
      * - `_text` in database
      * - Nullable, no default
      */
      localities: string[] | null;
    }
    export interface Whereable {
      /**
      * **legalEntities.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **legalEntities.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **legalEntities.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updatedAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **legalEntities.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **legalEntities.identifier**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      identifier?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **legalEntities.logo**
      * - `text` in database
      * - Nullable, no default
      */
      logo?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **legalEntities.frequency**
      * - `text` in database
      * - Nullable, default: `'monthly'::text`
      */
      frequency?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **legalEntities.targetDay**
      * - `text` in database
      * - Nullable, default: `'last'::text`
      */
      targetDay?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **legalEntities.serviceCentreId**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      serviceCentreId?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **legalEntities.providerId**
      * - `text` in database
      * - Nullable, no default
      */
      providerId?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **legalEntities.clientId**
      * - `text` in database
      * - Nullable, no default
      */
      clientId?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **legalEntities.milestoneSetId**
      * - `text` in database
      * - Nullable, no default
      */
      milestoneSetId?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **legalEntities.isArchived**
      * - `bool` in database
      * - Nullable, default: `false`
      */
      isArchived?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
      /**
      * **legalEntities.keyStart**
      * - `int8` in database
      * - Nullable, no default
      */
      keyStart?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **legalEntities.keyEnd**
      * - `int8` in database
      * - Nullable, no default
      */
      keyEnd?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **legalEntities.localities**
      * - `_text` in database
      * - Nullable, no default
      */
      localities?: string[] | db.Parameter<string[]> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string[] | db.Parameter<string[]> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **legalEntities.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **legalEntities.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **legalEntities.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updatedAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **legalEntities.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **legalEntities.identifier**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      identifier: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **legalEntities.logo**
      * - `text` in database
      * - Nullable, no default
      */
      logo?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **legalEntities.frequency**
      * - `text` in database
      * - Nullable, default: `'monthly'::text`
      */
      frequency?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **legalEntities.targetDay**
      * - `text` in database
      * - Nullable, default: `'last'::text`
      */
      targetDay?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **legalEntities.serviceCentreId**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      serviceCentreId: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **legalEntities.providerId**
      * - `text` in database
      * - Nullable, no default
      */
      providerId?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **legalEntities.clientId**
      * - `text` in database
      * - Nullable, no default
      */
      clientId?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **legalEntities.milestoneSetId**
      * - `text` in database
      * - Nullable, no default
      */
      milestoneSetId?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **legalEntities.isArchived**
      * - `bool` in database
      * - Nullable, default: `false`
      */
      isArchived?: boolean | db.Parameter<boolean> | null | db.DefaultType | db.SQLFragment;
      /**
      * **legalEntities.keyStart**
      * - `int8` in database
      * - Nullable, no default
      */
      keyStart?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | null | db.DefaultType | db.SQLFragment;
      /**
      * **legalEntities.keyEnd**
      * - `int8` in database
      * - Nullable, no default
      */
      keyEnd?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | null | db.DefaultType | db.SQLFragment;
      /**
      * **legalEntities.localities**
      * - `_text` in database
      * - Nullable, no default
      */
      localities?: string[] | db.Parameter<string[]> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **legalEntities.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **legalEntities.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **legalEntities.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updatedAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **legalEntities.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **legalEntities.identifier**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      identifier?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **legalEntities.logo**
      * - `text` in database
      * - Nullable, no default
      */
      logo?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **legalEntities.frequency**
      * - `text` in database
      * - Nullable, default: `'monthly'::text`
      */
      frequency?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **legalEntities.targetDay**
      * - `text` in database
      * - Nullable, default: `'last'::text`
      */
      targetDay?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **legalEntities.serviceCentreId**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      serviceCentreId?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **legalEntities.providerId**
      * - `text` in database
      * - Nullable, no default
      */
      providerId?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **legalEntities.clientId**
      * - `text` in database
      * - Nullable, no default
      */
      clientId?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **legalEntities.milestoneSetId**
      * - `text` in database
      * - Nullable, no default
      */
      milestoneSetId?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **legalEntities.isArchived**
      * - `bool` in database
      * - Nullable, default: `false`
      */
      isArchived?: boolean | db.Parameter<boolean> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **legalEntities.keyStart**
      * - `int8` in database
      * - Nullable, no default
      */
      keyStart?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **legalEntities.keyEnd**
      * - `int8` in database
      * - Nullable, no default
      */
      keyEnd?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **legalEntities.localities**
      * - `_text` in database
      * - Nullable, no default
      */
      localities?: string[] | db.Parameter<string[]> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string[] | db.Parameter<string[]> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'legal_entities_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **localities**
   * - Table in database
   */
  export namespace localities {
    export type Table = 'localities';
    export interface Selectable {
      /**
      * **localities.isoCode**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      isoCode: string;
      /**
      * **localities.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **localities.parent**
      * - `text` in database
      * - Nullable, no default
      */
      parent: string | null;
    }
    export interface JSONSelectable {
      /**
      * **localities.isoCode**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      isoCode: string;
      /**
      * **localities.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **localities.parent**
      * - `text` in database
      * - Nullable, no default
      */
      parent: string | null;
    }
    export interface Whereable {
      /**
      * **localities.isoCode**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      isoCode?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **localities.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **localities.parent**
      * - `text` in database
      * - Nullable, no default
      */
      parent?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **localities.isoCode**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      isoCode: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **localities.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **localities.parent**
      * - `text` in database
      * - Nullable, no default
      */
      parent?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **localities.isoCode**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      isoCode?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **localities.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **localities.parent**
      * - `text` in database
      * - Nullable, no default
      */
      parent?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'localities_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **milestones**
   * - Table in database
   */
  export namespace milestones {
    export type Table = 'milestones';
    export interface Selectable {
      /**
      * **milestones.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **milestones.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt: Date;
      /**
      * **milestones.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updatedAt: Date;
      /**
      * **milestones.identifier**
      * - `text` in database
      * - Nullable, no default
      */
      identifier: string | null;
      /**
      * **milestones.description**
      * - `text` in database
      * - Nullable, no default
      */
      description: string | null;
      /**
      * **milestones.index**
      * - `int4` in database
      * - Nullable, no default
      */
      index: number | null;
      /**
      * **milestones.interval**
      * - `int4` in database
      * - Nullable, no default
      */
      interval: number | null;
      /**
      * **milestones.time**
      * - `timetz` in database
      * - Nullable, no default
      */
      time: db.TimeTzString | null;
      /**
      * **milestones.pivot**
      * - `bool` in database
      * - Nullable, no default
      */
      pivot: boolean | null;
      /**
      * **milestones.entities**
      * - `_text` in database
      * - Nullable, no default
      */
      entities: string[] | null;
      /**
      * **milestones.setId**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      setId: string;
    }
    export interface JSONSelectable {
      /**
      * **milestones.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **milestones.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt: db.TimestampTzString;
      /**
      * **milestones.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updatedAt: db.TimestampTzString;
      /**
      * **milestones.identifier**
      * - `text` in database
      * - Nullable, no default
      */
      identifier: string | null;
      /**
      * **milestones.description**
      * - `text` in database
      * - Nullable, no default
      */
      description: string | null;
      /**
      * **milestones.index**
      * - `int4` in database
      * - Nullable, no default
      */
      index: number | null;
      /**
      * **milestones.interval**
      * - `int4` in database
      * - Nullable, no default
      */
      interval: number | null;
      /**
      * **milestones.time**
      * - `timetz` in database
      * - Nullable, no default
      */
      time: db.TimeTzString | null;
      /**
      * **milestones.pivot**
      * - `bool` in database
      * - Nullable, no default
      */
      pivot: boolean | null;
      /**
      * **milestones.entities**
      * - `_text` in database
      * - Nullable, no default
      */
      entities: string[] | null;
      /**
      * **milestones.setId**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      setId: string;
    }
    export interface Whereable {
      /**
      * **milestones.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **milestones.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **milestones.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updatedAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **milestones.identifier**
      * - `text` in database
      * - Nullable, no default
      */
      identifier?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **milestones.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **milestones.index**
      * - `int4` in database
      * - Nullable, no default
      */
      index?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **milestones.interval**
      * - `int4` in database
      * - Nullable, no default
      */
      interval?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **milestones.time**
      * - `timetz` in database
      * - Nullable, no default
      */
      time?: db.TimeTzString | db.Parameter<db.TimeTzString> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, db.TimeTzString | db.Parameter<db.TimeTzString> | db.SQLFragment | db.ParentColumn>;
      /**
      * **milestones.pivot**
      * - `bool` in database
      * - Nullable, no default
      */
      pivot?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
      /**
      * **milestones.entities**
      * - `_text` in database
      * - Nullable, no default
      */
      entities?: string[] | db.Parameter<string[]> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string[] | db.Parameter<string[]> | db.SQLFragment | db.ParentColumn>;
      /**
      * **milestones.setId**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      setId?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **milestones.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **milestones.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **milestones.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updatedAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **milestones.identifier**
      * - `text` in database
      * - Nullable, no default
      */
      identifier?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **milestones.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **milestones.index**
      * - `int4` in database
      * - Nullable, no default
      */
      index?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **milestones.interval**
      * - `int4` in database
      * - Nullable, no default
      */
      interval?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **milestones.time**
      * - `timetz` in database
      * - Nullable, no default
      */
      time?: db.TimeTzString | db.Parameter<db.TimeTzString> | null | db.DefaultType | db.SQLFragment;
      /**
      * **milestones.pivot**
      * - `bool` in database
      * - Nullable, no default
      */
      pivot?: boolean | db.Parameter<boolean> | null | db.DefaultType | db.SQLFragment;
      /**
      * **milestones.entities**
      * - `_text` in database
      * - Nullable, no default
      */
      entities?: string[] | db.Parameter<string[]> | null | db.DefaultType | db.SQLFragment;
      /**
      * **milestones.setId**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      setId: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **milestones.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **milestones.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **milestones.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updatedAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **milestones.identifier**
      * - `text` in database
      * - Nullable, no default
      */
      identifier?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **milestones.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **milestones.index**
      * - `int4` in database
      * - Nullable, no default
      */
      index?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **milestones.interval**
      * - `int4` in database
      * - Nullable, no default
      */
      interval?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **milestones.time**
      * - `timetz` in database
      * - Nullable, no default
      */
      time?: db.TimeTzString | db.Parameter<db.TimeTzString> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, db.TimeTzString | db.Parameter<db.TimeTzString> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **milestones.pivot**
      * - `bool` in database
      * - Nullable, no default
      */
      pivot?: boolean | db.Parameter<boolean> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **milestones.entities**
      * - `_text` in database
      * - Nullable, no default
      */
      entities?: string[] | db.Parameter<string[]> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string[] | db.Parameter<string[]> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **milestones.setId**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      setId?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'milestones_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **milestoneSets**
   * - Table in database
   */
  export namespace milestoneSets {
    export type Table = 'milestoneSets';
    export interface Selectable {
      /**
      * **milestoneSets.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **milestoneSets.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt: Date;
      /**
      * **milestoneSets.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updatedAt: Date;
      /**
      * **milestoneSets.identifier**
      * - `text` in database
      * - Nullable, no default
      */
      identifier: string | null;
      /**
      * **milestoneSets.isDefault**
      * - `bool` in database
      * - Nullable, no default
      */
      isDefault: boolean | null;
    }
    export interface JSONSelectable {
      /**
      * **milestoneSets.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **milestoneSets.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt: db.TimestampTzString;
      /**
      * **milestoneSets.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updatedAt: db.TimestampTzString;
      /**
      * **milestoneSets.identifier**
      * - `text` in database
      * - Nullable, no default
      */
      identifier: string | null;
      /**
      * **milestoneSets.isDefault**
      * - `bool` in database
      * - Nullable, no default
      */
      isDefault: boolean | null;
    }
    export interface Whereable {
      /**
      * **milestoneSets.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **milestoneSets.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **milestoneSets.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updatedAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **milestoneSets.identifier**
      * - `text` in database
      * - Nullable, no default
      */
      identifier?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **milestoneSets.isDefault**
      * - `bool` in database
      * - Nullable, no default
      */
      isDefault?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **milestoneSets.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **milestoneSets.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **milestoneSets.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updatedAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **milestoneSets.identifier**
      * - `text` in database
      * - Nullable, no default
      */
      identifier?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **milestoneSets.isDefault**
      * - `bool` in database
      * - Nullable, no default
      */
      isDefault?: boolean | db.Parameter<boolean> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **milestoneSets.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **milestoneSets.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **milestoneSets.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updatedAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **milestoneSets.identifier**
      * - `text` in database
      * - Nullable, no default
      */
      identifier?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **milestoneSets.isDefault**
      * - `bool` in database
      * - Nullable, no default
      */
      isDefault?: boolean | db.Parameter<boolean> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'milestonesets_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **providers**
   * - Table in database
   */
  export namespace providers {
    export type Table = 'providers';
    export interface Selectable {
      /**
      * **providers.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **providers.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt: Date;
      /**
      * **providers.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updatedAt: Date;
      /**
      * **providers.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **providers.identifier**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      identifier: string;
      /**
      * **providers.logo**
      * - `text` in database
      * - Nullable, no default
      */
      logo: string | null;
      /**
      * **providers.serviceCentreId**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      serviceCentreId: string;
      /**
      * **providers.isArchived**
      * - `bool` in database
      * - Nullable, default: `false`
      */
      isArchived: boolean | null;
      /**
      * **providers.keyStart**
      * - `int8` in database
      * - Nullable, no default
      */
      keyStart: db.Int8String | null;
      /**
      * **providers.keyEnd**
      * - `int8` in database
      * - Nullable, no default
      */
      keyEnd: db.Int8String | null;
      /**
      * **providers.localities**
      * - `_text` in database
      * - Nullable, no default
      */
      localities: string[] | null;
    }
    export interface JSONSelectable {
      /**
      * **providers.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **providers.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt: db.TimestampTzString;
      /**
      * **providers.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updatedAt: db.TimestampTzString;
      /**
      * **providers.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **providers.identifier**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      identifier: string;
      /**
      * **providers.logo**
      * - `text` in database
      * - Nullable, no default
      */
      logo: string | null;
      /**
      * **providers.serviceCentreId**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      serviceCentreId: string;
      /**
      * **providers.isArchived**
      * - `bool` in database
      * - Nullable, default: `false`
      */
      isArchived: boolean | null;
      /**
      * **providers.keyStart**
      * - `int8` in database
      * - Nullable, no default
      */
      keyStart: number | null;
      /**
      * **providers.keyEnd**
      * - `int8` in database
      * - Nullable, no default
      */
      keyEnd: number | null;
      /**
      * **providers.localities**
      * - `_text` in database
      * - Nullable, no default
      */
      localities: string[] | null;
    }
    export interface Whereable {
      /**
      * **providers.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **providers.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **providers.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updatedAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **providers.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **providers.identifier**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      identifier?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **providers.logo**
      * - `text` in database
      * - Nullable, no default
      */
      logo?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **providers.serviceCentreId**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      serviceCentreId?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **providers.isArchived**
      * - `bool` in database
      * - Nullable, default: `false`
      */
      isArchived?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
      /**
      * **providers.keyStart**
      * - `int8` in database
      * - Nullable, no default
      */
      keyStart?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **providers.keyEnd**
      * - `int8` in database
      * - Nullable, no default
      */
      keyEnd?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **providers.localities**
      * - `_text` in database
      * - Nullable, no default
      */
      localities?: string[] | db.Parameter<string[]> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string[] | db.Parameter<string[]> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **providers.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **providers.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **providers.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updatedAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **providers.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **providers.identifier**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      identifier: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **providers.logo**
      * - `text` in database
      * - Nullable, no default
      */
      logo?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **providers.serviceCentreId**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      serviceCentreId: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **providers.isArchived**
      * - `bool` in database
      * - Nullable, default: `false`
      */
      isArchived?: boolean | db.Parameter<boolean> | null | db.DefaultType | db.SQLFragment;
      /**
      * **providers.keyStart**
      * - `int8` in database
      * - Nullable, no default
      */
      keyStart?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | null | db.DefaultType | db.SQLFragment;
      /**
      * **providers.keyEnd**
      * - `int8` in database
      * - Nullable, no default
      */
      keyEnd?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | null | db.DefaultType | db.SQLFragment;
      /**
      * **providers.localities**
      * - `_text` in database
      * - Nullable, no default
      */
      localities?: string[] | db.Parameter<string[]> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **providers.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **providers.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **providers.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updatedAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **providers.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **providers.identifier**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      identifier?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **providers.logo**
      * - `text` in database
      * - Nullable, no default
      */
      logo?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **providers.serviceCentreId**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      serviceCentreId?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **providers.isArchived**
      * - `bool` in database
      * - Nullable, default: `false`
      */
      isArchived?: boolean | db.Parameter<boolean> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **providers.keyStart**
      * - `int8` in database
      * - Nullable, no default
      */
      keyStart?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **providers.keyEnd**
      * - `int8` in database
      * - Nullable, no default
      */
      keyEnd?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **providers.localities**
      * - `_text` in database
      * - Nullable, no default
      */
      localities?: string[] | db.Parameter<string[]> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string[] | db.Parameter<string[]> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'providers_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **scheduleDates**
   * - Table in database
   */
  export namespace scheduleDates {
    export type Table = 'scheduleDates';
    export interface Selectable {
      /**
      * **scheduleDates.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **scheduleDates.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt: Date;
      /**
      * **scheduleDates.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updatedAt: Date;
      /**
      * **scheduleDates.scheduleId**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      scheduleId: string;
      /**
      * **scheduleDates.milestoneId**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      milestoneId: string;
      /**
      * **scheduleDates.date**
      * - `date` in database
      * - Nullable, no default
      */
      date: Date | null;
      /**
      * **scheduleDates.isManual**
      * - `bool` in database
      * - Nullable, default: `false`
      */
      isManual: boolean | null;
      /**
      * **scheduleDates.clientId**
      * - `text` in database
      * - Nullable, no default
      */
      clientId: string | null;
      /**
      * **scheduleDates.status**
      * - `text` in database
      * - Nullable, no default
      */
      status: string | null;
    }
    export interface JSONSelectable {
      /**
      * **scheduleDates.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **scheduleDates.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt: db.TimestampTzString;
      /**
      * **scheduleDates.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updatedAt: db.TimestampTzString;
      /**
      * **scheduleDates.scheduleId**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      scheduleId: string;
      /**
      * **scheduleDates.milestoneId**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      milestoneId: string;
      /**
      * **scheduleDates.date**
      * - `date` in database
      * - Nullable, no default
      */
      date: db.DateString | null;
      /**
      * **scheduleDates.isManual**
      * - `bool` in database
      * - Nullable, default: `false`
      */
      isManual: boolean | null;
      /**
      * **scheduleDates.clientId**
      * - `text` in database
      * - Nullable, no default
      */
      clientId: string | null;
      /**
      * **scheduleDates.status**
      * - `text` in database
      * - Nullable, no default
      */
      status: string | null;
    }
    export interface Whereable {
      /**
      * **scheduleDates.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **scheduleDates.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **scheduleDates.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updatedAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **scheduleDates.scheduleId**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      scheduleId?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **scheduleDates.milestoneId**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      milestoneId?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **scheduleDates.date**
      * - `date` in database
      * - Nullable, no default
      */
      date?: (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **scheduleDates.isManual**
      * - `bool` in database
      * - Nullable, default: `false`
      */
      isManual?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
      /**
      * **scheduleDates.clientId**
      * - `text` in database
      * - Nullable, no default
      */
      clientId?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **scheduleDates.status**
      * - `text` in database
      * - Nullable, no default
      */
      status?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **scheduleDates.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **scheduleDates.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **scheduleDates.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updatedAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **scheduleDates.scheduleId**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      scheduleId: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **scheduleDates.milestoneId**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      milestoneId: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **scheduleDates.date**
      * - `date` in database
      * - Nullable, no default
      */
      date?: (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | null | db.DefaultType | db.SQLFragment;
      /**
      * **scheduleDates.isManual**
      * - `bool` in database
      * - Nullable, default: `false`
      */
      isManual?: boolean | db.Parameter<boolean> | null | db.DefaultType | db.SQLFragment;
      /**
      * **scheduleDates.clientId**
      * - `text` in database
      * - Nullable, no default
      */
      clientId?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **scheduleDates.status**
      * - `text` in database
      * - Nullable, no default
      */
      status?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **scheduleDates.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **scheduleDates.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **scheduleDates.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updatedAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **scheduleDates.scheduleId**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      scheduleId?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **scheduleDates.milestoneId**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      milestoneId?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **scheduleDates.date**
      * - `date` in database
      * - Nullable, no default
      */
      date?: (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **scheduleDates.isManual**
      * - `bool` in database
      * - Nullable, default: `false`
      */
      isManual?: boolean | db.Parameter<boolean> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **scheduleDates.clientId**
      * - `text` in database
      * - Nullable, no default
      */
      clientId?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **scheduleDates.status**
      * - `text` in database
      * - Nullable, no default
      */
      status?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'schedule_dates_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **schedules**
   * - Table in database
   */
  export namespace schedules {
    export type Table = 'schedules';
    export interface Selectable {
      /**
      * **schedules.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **schedules.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt: Date;
      /**
      * **schedules.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updatedAt: Date;
      /**
      * **schedules.legalEntityId**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      legalEntityId: string;
      /**
      * **schedules.year**
      * - `int4` in database
      * - Nullable, no default
      */
      year: number | null;
      /**
      * **schedules.index**
      * - `int4` in database
      * - Nullable, no default
      */
      index: number | null;
      /**
      * **schedules.name**
      * - `text` in database
      * - Nullable, no default
      */
      name: string | null;
      /**
      * **schedules.status**
      * - `text` in database
      * - Nullable, default: `'draft'::text`
      */
      status: string | null;
      /**
      * **schedules.version**
      * - `int4` in database
      * - Nullable, default: `0`
      */
      version: number | null;
    }
    export interface JSONSelectable {
      /**
      * **schedules.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **schedules.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt: db.TimestampTzString;
      /**
      * **schedules.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updatedAt: db.TimestampTzString;
      /**
      * **schedules.legalEntityId**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      legalEntityId: string;
      /**
      * **schedules.year**
      * - `int4` in database
      * - Nullable, no default
      */
      year: number | null;
      /**
      * **schedules.index**
      * - `int4` in database
      * - Nullable, no default
      */
      index: number | null;
      /**
      * **schedules.name**
      * - `text` in database
      * - Nullable, no default
      */
      name: string | null;
      /**
      * **schedules.status**
      * - `text` in database
      * - Nullable, default: `'draft'::text`
      */
      status: string | null;
      /**
      * **schedules.version**
      * - `int4` in database
      * - Nullable, default: `0`
      */
      version: number | null;
    }
    export interface Whereable {
      /**
      * **schedules.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **schedules.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **schedules.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updatedAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **schedules.legalEntityId**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      legalEntityId?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **schedules.year**
      * - `int4` in database
      * - Nullable, no default
      */
      year?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **schedules.index**
      * - `int4` in database
      * - Nullable, no default
      */
      index?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **schedules.name**
      * - `text` in database
      * - Nullable, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **schedules.status**
      * - `text` in database
      * - Nullable, default: `'draft'::text`
      */
      status?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **schedules.version**
      * - `int4` in database
      * - Nullable, default: `0`
      */
      version?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **schedules.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **schedules.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **schedules.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updatedAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **schedules.legalEntityId**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      legalEntityId: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **schedules.year**
      * - `int4` in database
      * - Nullable, no default
      */
      year?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **schedules.index**
      * - `int4` in database
      * - Nullable, no default
      */
      index?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **schedules.name**
      * - `text` in database
      * - Nullable, no default
      */
      name?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **schedules.status**
      * - `text` in database
      * - Nullable, default: `'draft'::text`
      */
      status?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **schedules.version**
      * - `int4` in database
      * - Nullable, default: `0`
      */
      version?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **schedules.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **schedules.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **schedules.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updatedAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **schedules.legalEntityId**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      legalEntityId?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **schedules.year**
      * - `int4` in database
      * - Nullable, no default
      */
      year?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **schedules.index**
      * - `int4` in database
      * - Nullable, no default
      */
      index?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **schedules.name**
      * - `text` in database
      * - Nullable, no default
      */
      name?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **schedules.status**
      * - `text` in database
      * - Nullable, default: `'draft'::text`
      */
      status?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **schedules.version**
      * - `int4` in database
      * - Nullable, default: `0`
      */
      version?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'schedules_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **serviceCentres**
   * - Table in database
   */
  export namespace serviceCentres {
    export type Table = 'serviceCentres';
    export interface Selectable {
      /**
      * **serviceCentres.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **serviceCentres.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt: Date;
      /**
      * **serviceCentres.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updatedAt: Date;
      /**
      * **serviceCentres.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **serviceCentres.identifier**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      identifier: string;
      /**
      * **serviceCentres.parentId**
      * - `text` in database
      * - Nullable, no default
      */
      parentId: string | null;
      /**
      * **serviceCentres.isArchived**
      * - `bool` in database
      * - Nullable, default: `false`
      */
      isArchived: boolean | null;
      /**
      * **serviceCentres.keyStart**
      * - `int8` in database
      * - Nullable, no default
      */
      keyStart: db.Int8String | null;
      /**
      * **serviceCentres.keyEnd**
      * - `int8` in database
      * - Nullable, no default
      */
      keyEnd: db.Int8String | null;
      /**
      * **serviceCentres.localities**
      * - `_text` in database
      * - Nullable, no default
      */
      localities: string[] | null;
    }
    export interface JSONSelectable {
      /**
      * **serviceCentres.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **serviceCentres.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt: db.TimestampTzString;
      /**
      * **serviceCentres.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updatedAt: db.TimestampTzString;
      /**
      * **serviceCentres.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **serviceCentres.identifier**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      identifier: string;
      /**
      * **serviceCentres.parentId**
      * - `text` in database
      * - Nullable, no default
      */
      parentId: string | null;
      /**
      * **serviceCentres.isArchived**
      * - `bool` in database
      * - Nullable, default: `false`
      */
      isArchived: boolean | null;
      /**
      * **serviceCentres.keyStart**
      * - `int8` in database
      * - Nullable, no default
      */
      keyStart: number | null;
      /**
      * **serviceCentres.keyEnd**
      * - `int8` in database
      * - Nullable, no default
      */
      keyEnd: number | null;
      /**
      * **serviceCentres.localities**
      * - `_text` in database
      * - Nullable, no default
      */
      localities: string[] | null;
    }
    export interface Whereable {
      /**
      * **serviceCentres.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **serviceCentres.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **serviceCentres.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updatedAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **serviceCentres.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **serviceCentres.identifier**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      identifier?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **serviceCentres.parentId**
      * - `text` in database
      * - Nullable, no default
      */
      parentId?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **serviceCentres.isArchived**
      * - `bool` in database
      * - Nullable, default: `false`
      */
      isArchived?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
      /**
      * **serviceCentres.keyStart**
      * - `int8` in database
      * - Nullable, no default
      */
      keyStart?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **serviceCentres.keyEnd**
      * - `int8` in database
      * - Nullable, no default
      */
      keyEnd?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **serviceCentres.localities**
      * - `_text` in database
      * - Nullable, no default
      */
      localities?: string[] | db.Parameter<string[]> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string[] | db.Parameter<string[]> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **serviceCentres.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **serviceCentres.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **serviceCentres.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updatedAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **serviceCentres.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **serviceCentres.identifier**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      identifier: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **serviceCentres.parentId**
      * - `text` in database
      * - Nullable, no default
      */
      parentId?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **serviceCentres.isArchived**
      * - `bool` in database
      * - Nullable, default: `false`
      */
      isArchived?: boolean | db.Parameter<boolean> | null | db.DefaultType | db.SQLFragment;
      /**
      * **serviceCentres.keyStart**
      * - `int8` in database
      * - Nullable, no default
      */
      keyStart?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | null | db.DefaultType | db.SQLFragment;
      /**
      * **serviceCentres.keyEnd**
      * - `int8` in database
      * - Nullable, no default
      */
      keyEnd?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | null | db.DefaultType | db.SQLFragment;
      /**
      * **serviceCentres.localities**
      * - `_text` in database
      * - Nullable, no default
      */
      localities?: string[] | db.Parameter<string[]> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **serviceCentres.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **serviceCentres.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **serviceCentres.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updatedAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **serviceCentres.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **serviceCentres.identifier**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      identifier?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **serviceCentres.parentId**
      * - `text` in database
      * - Nullable, no default
      */
      parentId?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **serviceCentres.isArchived**
      * - `bool` in database
      * - Nullable, default: `false`
      */
      isArchived?: boolean | db.Parameter<boolean> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **serviceCentres.keyStart**
      * - `int8` in database
      * - Nullable, no default
      */
      keyStart?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **serviceCentres.keyEnd**
      * - `int8` in database
      * - Nullable, no default
      */
      keyEnd?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **serviceCentres.localities**
      * - `_text` in database
      * - Nullable, no default
      */
      localities?: string[] | db.Parameter<string[]> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string[] | db.Parameter<string[]> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'service_centres_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **workers**
   * - Table in database
   */
  export namespace workers {
    export type Table = 'workers';
    export interface Selectable {
      /**
      * **workers.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **workers.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt: Date;
      /**
      * **workers.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updatedAt: Date;
      /**
      * **workers.identifier**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      identifier: string;
      /**
      * **workers.firstName**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      firstName: string;
      /**
      * **workers.lastName**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      lastName: string;
      /**
      * **workers.photo**
      * - `text` in database
      * - Nullable, no default
      */
      photo: string | null;
      /**
      * **workers.clientId**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      clientId: string;
      /**
      * **workers.legalEntityId**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      legalEntityId: string;
      /**
      * **workers.isArchived**
      * - `bool` in database
      * - Nullable, default: `false`
      */
      isArchived: boolean | null;
      /**
      * **workers.clientKeyStart**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      clientKeyStart: db.Int8String;
      /**
      * **workers.clientKeyEnd**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      clientKeyEnd: db.Int8String;
      /**
      * **workers.legalEntityKeyStart**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      legalEntityKeyStart: db.Int8String;
      /**
      * **workers.legalEntityKeyEnd**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      legalEntityKeyEnd: db.Int8String;
      /**
      * **workers.locality**
      * - `text` in database
      * - Nullable, no default
      */
      locality: string | null;
    }
    export interface JSONSelectable {
      /**
      * **workers.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **workers.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt: db.TimestampTzString;
      /**
      * **workers.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updatedAt: db.TimestampTzString;
      /**
      * **workers.identifier**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      identifier: string;
      /**
      * **workers.firstName**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      firstName: string;
      /**
      * **workers.lastName**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      lastName: string;
      /**
      * **workers.photo**
      * - `text` in database
      * - Nullable, no default
      */
      photo: string | null;
      /**
      * **workers.clientId**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      clientId: string;
      /**
      * **workers.legalEntityId**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      legalEntityId: string;
      /**
      * **workers.isArchived**
      * - `bool` in database
      * - Nullable, default: `false`
      */
      isArchived: boolean | null;
      /**
      * **workers.clientKeyStart**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      clientKeyStart: number;
      /**
      * **workers.clientKeyEnd**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      clientKeyEnd: number;
      /**
      * **workers.legalEntityKeyStart**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      legalEntityKeyStart: number;
      /**
      * **workers.legalEntityKeyEnd**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      legalEntityKeyEnd: number;
      /**
      * **workers.locality**
      * - `text` in database
      * - Nullable, no default
      */
      locality: string | null;
    }
    export interface Whereable {
      /**
      * **workers.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **workers.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **workers.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updatedAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **workers.identifier**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      identifier?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **workers.firstName**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      firstName?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **workers.lastName**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      lastName?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **workers.photo**
      * - `text` in database
      * - Nullable, no default
      */
      photo?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **workers.clientId**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      clientId?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **workers.legalEntityId**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      legalEntityId?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **workers.isArchived**
      * - `bool` in database
      * - Nullable, default: `false`
      */
      isArchived?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
      /**
      * **workers.clientKeyStart**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      clientKeyStart?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **workers.clientKeyEnd**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      clientKeyEnd?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **workers.legalEntityKeyStart**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      legalEntityKeyStart?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **workers.legalEntityKeyEnd**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      legalEntityKeyEnd?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **workers.locality**
      * - `text` in database
      * - Nullable, no default
      */
      locality?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **workers.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **workers.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **workers.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updatedAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **workers.identifier**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      identifier: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **workers.firstName**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      firstName: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **workers.lastName**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      lastName: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **workers.photo**
      * - `text` in database
      * - Nullable, no default
      */
      photo?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **workers.clientId**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      clientId: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **workers.legalEntityId**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      legalEntityId: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **workers.isArchived**
      * - `bool` in database
      * - Nullable, default: `false`
      */
      isArchived?: boolean | db.Parameter<boolean> | null | db.DefaultType | db.SQLFragment;
      /**
      * **workers.clientKeyStart**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      clientKeyStart: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment;
      /**
      * **workers.clientKeyEnd**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      clientKeyEnd: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment;
      /**
      * **workers.legalEntityKeyStart**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      legalEntityKeyStart: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment;
      /**
      * **workers.legalEntityKeyEnd**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      legalEntityKeyEnd: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment;
      /**
      * **workers.locality**
      * - `text` in database
      * - Nullable, no default
      */
      locality?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **workers.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **workers.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **workers.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updatedAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **workers.identifier**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      identifier?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **workers.firstName**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      firstName?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **workers.lastName**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      lastName?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **workers.photo**
      * - `text` in database
      * - Nullable, no default
      */
      photo?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **workers.clientId**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      clientId?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **workers.legalEntityId**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      legalEntityId?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **workers.isArchived**
      * - `bool` in database
      * - Nullable, default: `false`
      */
      isArchived?: boolean | db.Parameter<boolean> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **workers.clientKeyStart**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      clientKeyStart?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment>;
      /**
      * **workers.clientKeyEnd**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      clientKeyEnd?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment>;
      /**
      * **workers.legalEntityKeyStart**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      legalEntityKeyStart?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment>;
      /**
      * **workers.legalEntityKeyEnd**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      legalEntityKeyEnd?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment>;
      /**
      * **workers.locality**
      * - `text` in database
      * - Nullable, no default
      */
      locality?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'worker_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /* --- aggregate types --- */

  export namespace public {  
    export type Table = clients.Table | holidays.Table | legalEntities.Table | localities.Table | milestones.Table | milestoneSets.Table | providers.Table | scheduleDates.Table | schedules.Table | serviceCentres.Table | workers.Table;
    export type Selectable = clients.Selectable | holidays.Selectable | legalEntities.Selectable | localities.Selectable | milestones.Selectable | milestoneSets.Selectable | providers.Selectable | scheduleDates.Selectable | schedules.Selectable | serviceCentres.Selectable | workers.Selectable;
    export type JSONSelectable = clients.JSONSelectable | holidays.JSONSelectable | legalEntities.JSONSelectable | localities.JSONSelectable | milestones.JSONSelectable | milestoneSets.JSONSelectable | providers.JSONSelectable | scheduleDates.JSONSelectable | schedules.JSONSelectable | serviceCentres.JSONSelectable | workers.JSONSelectable;
    export type Whereable = clients.Whereable | holidays.Whereable | legalEntities.Whereable | localities.Whereable | milestones.Whereable | milestoneSets.Whereable | providers.Whereable | scheduleDates.Whereable | schedules.Whereable | serviceCentres.Whereable | workers.Whereable;
    export type Insertable = clients.Insertable | holidays.Insertable | legalEntities.Insertable | localities.Insertable | milestones.Insertable | milestoneSets.Insertable | providers.Insertable | scheduleDates.Insertable | schedules.Insertable | serviceCentres.Insertable | workers.Insertable;
    export type Updatable = clients.Updatable | holidays.Updatable | legalEntities.Updatable | localities.Updatable | milestones.Updatable | milestoneSets.Updatable | providers.Updatable | scheduleDates.Updatable | schedules.Updatable | serviceCentres.Updatable | workers.Updatable;
    export type UniqueIndex = clients.UniqueIndex | holidays.UniqueIndex | legalEntities.UniqueIndex | localities.UniqueIndex | milestones.UniqueIndex | milestoneSets.UniqueIndex | providers.UniqueIndex | scheduleDates.UniqueIndex | schedules.UniqueIndex | serviceCentres.UniqueIndex | workers.UniqueIndex;
    export type Column = clients.Column | holidays.Column | legalEntities.Column | localities.Column | milestones.Column | milestoneSets.Column | providers.Column | scheduleDates.Column | schedules.Column | serviceCentres.Column | workers.Column;
  
    export type AllBaseTables = [clients.Table, holidays.Table, legalEntities.Table, localities.Table, milestones.Table, milestoneSets.Table, providers.Table, scheduleDates.Table, schedules.Table, serviceCentres.Table, workers.Table];
    export type AllForeignTables = [];
    export type AllViews = [];
    export type AllMaterializedViews = [];
    export type AllTablesAndViews = [clients.Table, holidays.Table, legalEntities.Table, localities.Table, milestones.Table, milestoneSets.Table, providers.Table, scheduleDates.Table, schedules.Table, serviceCentres.Table, workers.Table];
  }



  /* === global aggregate types === */

  export type Schema = 'public';
  export type Table = public.Table;
  export type Selectable = public.Selectable;
  export type JSONSelectable = public.JSONSelectable;
  export type Whereable = public.Whereable;
  export type Insertable = public.Insertable;
  export type Updatable = public.Updatable;
  export type UniqueIndex = public.UniqueIndex;
  export type Column = public.Column;

  export type AllSchemas = ['public'];
  export type AllBaseTables = [...public.AllBaseTables];
  export type AllForeignTables = [...public.AllForeignTables];
  export type AllViews = [...public.AllViews];
  export type AllMaterializedViews = [...public.AllMaterializedViews];
  export type AllTablesAndViews = [...public.AllTablesAndViews];


  /* === lookups === */

  export type SelectableForTable<T extends Table> = {
    "clients": clients.Selectable;
    "holidays": holidays.Selectable;
    "legalEntities": legalEntities.Selectable;
    "localities": localities.Selectable;
    "milestones": milestones.Selectable;
    "milestoneSets": milestoneSets.Selectable;
    "providers": providers.Selectable;
    "scheduleDates": scheduleDates.Selectable;
    "schedules": schedules.Selectable;
    "serviceCentres": serviceCentres.Selectable;
    "workers": workers.Selectable;
  }[T];

  export type JSONSelectableForTable<T extends Table> = {
    "clients": clients.JSONSelectable;
    "holidays": holidays.JSONSelectable;
    "legalEntities": legalEntities.JSONSelectable;
    "localities": localities.JSONSelectable;
    "milestones": milestones.JSONSelectable;
    "milestoneSets": milestoneSets.JSONSelectable;
    "providers": providers.JSONSelectable;
    "scheduleDates": scheduleDates.JSONSelectable;
    "schedules": schedules.JSONSelectable;
    "serviceCentres": serviceCentres.JSONSelectable;
    "workers": workers.JSONSelectable;
  }[T];

  export type WhereableForTable<T extends Table> = {
    "clients": clients.Whereable;
    "holidays": holidays.Whereable;
    "legalEntities": legalEntities.Whereable;
    "localities": localities.Whereable;
    "milestones": milestones.Whereable;
    "milestoneSets": milestoneSets.Whereable;
    "providers": providers.Whereable;
    "scheduleDates": scheduleDates.Whereable;
    "schedules": schedules.Whereable;
    "serviceCentres": serviceCentres.Whereable;
    "workers": workers.Whereable;
  }[T];

  export type InsertableForTable<T extends Table> = {
    "clients": clients.Insertable;
    "holidays": holidays.Insertable;
    "legalEntities": legalEntities.Insertable;
    "localities": localities.Insertable;
    "milestones": milestones.Insertable;
    "milestoneSets": milestoneSets.Insertable;
    "providers": providers.Insertable;
    "scheduleDates": scheduleDates.Insertable;
    "schedules": schedules.Insertable;
    "serviceCentres": serviceCentres.Insertable;
    "workers": workers.Insertable;
  }[T];

  export type UpdatableForTable<T extends Table> = {
    "clients": clients.Updatable;
    "holidays": holidays.Updatable;
    "legalEntities": legalEntities.Updatable;
    "localities": localities.Updatable;
    "milestones": milestones.Updatable;
    "milestoneSets": milestoneSets.Updatable;
    "providers": providers.Updatable;
    "scheduleDates": scheduleDates.Updatable;
    "schedules": schedules.Updatable;
    "serviceCentres": serviceCentres.Updatable;
    "workers": workers.Updatable;
  }[T];

  export type UniqueIndexForTable<T extends Table> = {
    "clients": clients.UniqueIndex;
    "holidays": holidays.UniqueIndex;
    "legalEntities": legalEntities.UniqueIndex;
    "localities": localities.UniqueIndex;
    "milestones": milestones.UniqueIndex;
    "milestoneSets": milestoneSets.UniqueIndex;
    "providers": providers.UniqueIndex;
    "scheduleDates": scheduleDates.UniqueIndex;
    "schedules": schedules.UniqueIndex;
    "serviceCentres": serviceCentres.UniqueIndex;
    "workers": workers.UniqueIndex;
  }[T];

  export type ColumnForTable<T extends Table> = {
    "clients": clients.Column;
    "holidays": holidays.Column;
    "legalEntities": legalEntities.Column;
    "localities": localities.Column;
    "milestones": milestones.Column;
    "milestoneSets": milestoneSets.Column;
    "providers": providers.Column;
    "scheduleDates": scheduleDates.Column;
    "schedules": schedules.Column;
    "serviceCentres": serviceCentres.Column;
    "workers": workers.Column;
  }[T];

  export type SQLForTable<T extends Table> = {
    "clients": clients.SQL;
    "holidays": holidays.SQL;
    "legalEntities": legalEntities.SQL;
    "localities": localities.SQL;
    "milestones": milestones.SQL;
    "milestoneSets": milestoneSets.SQL;
    "providers": providers.SQL;
    "scheduleDates": scheduleDates.SQL;
    "schedules": schedules.SQL;
    "serviceCentres": serviceCentres.SQL;
    "workers": workers.SQL;
  }[T];

}
