name: üöÄ Deploy

on:
  push:
    branches:
      - main
      - dev
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  actions: write
  contents: read

defaults:
  run:
    shell: bash

jobs:
  lint:
    name: ‚¨£ ESLint
    runs-on: ubuntu-latest
    steps:
      - name: ‚¨áÔ∏è Checkout repo
        uses: actions/checkout@v3

      - name: ‚éî Setup node
        uses: actions/setup-node@v3
        with:
          cache: npm
          cache-dependency-path: ./package.json
          node-version: 18

      - name: üì• Install deps
        run: npm install

      # - name: üî¨ Lint
      #   run: npm run lint

  typecheck:
    name:  ¶ TypeScript
    runs-on: ubuntu-latest
    steps:
      - name: ‚¨áÔ∏è Checkout repo
        uses: actions/checkout@v3

      - name: ‚éî Setup node
        uses: actions/setup-node@v3
        with:
          cache: npm
          cache-dependency-path: ./package.json
          node-version: 18

      - name: üì• Install deps
        run: npm install

      # - name: üîé Type check
      #   run: npm run typecheck --if-present

  vitest:
    name: ‚ö° Vitest
    runs-on: ubuntu-latest
    steps:
      - name: ‚¨áÔ∏è Checkout repo
        uses: actions/checkout@v3

      - name: ‚éî Setup node
        uses: actions/setup-node@v3
        with:
          cache: npm
          cache-dependency-path: ./package.json
          node-version: 18

      - name: üì• Install deps
        run: npm install

      # - name: ‚ö° Run vitest
      #   run: npm run test -- --coverage

  deploy: 
    # needs: [lint, typecheck, vitest]
    runs-on: ubuntu-latest
    environment: Production

    steps:
      - name: ‚¨áÔ∏è Checkout repo
        uses: actions/checkout@v3

      - name: ‚éî Setup node
        uses: actions/setup-node@v3
        with:
          cache: npm
          cache-dependency-path: ./package.json
          node-version: 18

      - name: üëÄ Env
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Git ref:    ${{ github.ref }}"
          echo "GH actor:   ${{ github.actor }}"
          echo "SHA:        ${{ github.sha }}"
          VER=`node --version`; echo "Node ver:   $VER"
          VER=`npm --version`; echo "npm ver:    $VER"

      - name: üì• Install deps
        run: npm install

      - name: üèó Build
        run: npm run build

      - name: üõ† Install Arc
        run: npm i -g @architect/architect

      - name: üöÄ Production Deploy
        if: github.ref == 'refs/heads/main'
        run: |
          arc env -e production --add ARC_APP_SECRET ${{ secrets.ARC_APP_SECRET }}
          arc env -e production --add NODE_ENV production
          arc env -e production --add SESSION_SECRET ${{ secrets.SESSION_SECRET }}
          arc env -e production --add AUTH0_DOMAIN ${{ vars.AUTH0_DOMAIN }}
          arc env -e production --add AUTH0_CLIENT_ID ${{ secrets.AUTH0_CLIENT_ID }}
          arc env -e production --add AUTH0_CLIENT_SECRET ${{ secrets.AUTH0_CLIENT_SECRET }}
          arc env -e production --add AUTH0_CALLBACK_URL ${{ vars.AUTH0_CALLBACK_URL }}
          arc env -e production --add AUTH0_MANAGEMENT_CLIENT_ID ${{ secrets.AUTH0_MANAGEMENT_CLIENT_ID }}
          arc env -e production --add AUTH0_MANAGEMENT_CLIENT_SECRET ${{ secrets.AUTH0_MANAGEMENT_CLIENT_SECRET }}
          arc env -e production --add DOMAIN ${{ vars.DOMAIN }}
          arc env -e production --add HOLIDAY_API_KEY ${{ secrets.HOLIDAY_API_KEY }}
          arc env -e production --add DATABASE_URL ${{ secrets.DATABASE_URL }}
          arc deploy --production --prune
        env:
          CI: true
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
